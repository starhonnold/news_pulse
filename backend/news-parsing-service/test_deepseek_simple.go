package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"time"
)

// DeepSeekRequest —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ DeepSeek API
type DeepSeekRequest struct {
	Model       string            `json:"model"`
	Messages    []DeepSeekMessage `json:"messages"`
	MaxTokens   int               `json:"max_tokens,omitempty"`
	Temperature float64           `json:"temperature,omitempty"`
	Stream      bool              `json:"stream,omitempty"`
}

// DeepSeekMessage —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è DeepSeek API
type DeepSeekMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

// DeepSeekResponse —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSeek API
type DeepSeekResponse struct {
	Choices []DeepSeekChoice `json:"choices"`
	Error   *DeepSeekError   `json:"error,omitempty"`
	Usage   *DeepSeekUsage   `json:"usage,omitempty"`
}

// DeepSeekChoice —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –æ—Ç–≤–µ—Ç–∞
type DeepSeekChoice struct {
	Message DeepSeekMessage `json:"message"`
}

// DeepSeekError —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—à–∏–±–∫–∏
type DeepSeekError struct {
	Message string `json:"message"`
	Type    string `json:"type"`
	Code    string `json:"code,omitempty"`
}

// DeepSeekUsage —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
type DeepSeekUsage struct {
	PromptTokens     int `json:"prompt_tokens"`
	CompletionTokens int `json:"completion_tokens"`
	TotalTokens      int `json:"total_tokens"`
}

func main() {
	// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	apiKey := os.Getenv("DEEPSEEK_API_KEY")
	if apiKey == "" {
		fmt.Println("–û—à–∏–±–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DEEPSEEK_API_KEY")
		fmt.Println("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export DEEPSEEK_API_KEY=your_api_key")
		fmt.Println("–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –Ω–∞: https://platform.deepseek.com/api_keys")
		return
	}

	// –¢–µ—Å—Ç–æ–≤—ã–µ URL –Ω–æ–≤–æ—Å—Ç–µ–π
	testURLs := []string{
		"https://ria.ru/20250911/buryatiya-2041228792.html",
		"https://lenta.ru/news/2025/09/11/vyyavlen-neozhidannyy-priznak-priblizheniya-dementsii/",
	}

	fmt.Println("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek API")
	fmt.Println("üìä –ú–æ–¥–µ–ª—å: deepseek-chat")
	fmt.Println("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: $0.07/1M –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤, $1.10/1M –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
	fmt.Println(strings.Repeat("=", 60))

	for i, url := range testURLs {
		fmt.Printf("\nüì∞ –¢–µ—Å—Ç %d: %s\n", i+1, url)
		fmt.Println(strings.Repeat("-", 50))

		// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ DeepSeek API
		ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
		defer cancel()

		content, usage, err := extractContentWithDeepSeek(ctx, apiKey, url)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
			continue
		}

		if content == "" {
			fmt.Printf("‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)\n")
			continue
		}

		fmt.Printf("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑–≤–ª–µ—á–µ–Ω —É—Å–ø–µ—à–Ω–æ\n")
		fmt.Printf("üìÑ –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %d —Å–∏–º–≤–æ–ª–æ–≤\n", len(content))
		fmt.Printf("üìù –ù–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %s...\n", truncateString(content, 200))

		if usage != nil {
			cost := float64(usage.PromptTokens)*0.07/1000000 + float64(usage.CompletionTokens)*1.10/1000000
			fmt.Printf("üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: %d –≤—Ö–æ–¥–Ω—ã—Ö, %d –≤—ã—Ö–æ–¥–Ω—ã—Ö, %d –≤—Å–µ–≥–æ\n",
				usage.PromptTokens, usage.CompletionTokens, usage.TotalTokens)
			fmt.Printf("üíµ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $%.4f\n", cost)
		}
	}

	fmt.Println("\n" + strings.Repeat("=", 60))
	fmt.Println("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
	fmt.Println("\nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: DeepSeek API —Å –º–æ–¥–µ–ª—å—é deepseek-chat")
	fmt.Println("   - –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
	fmt.Println("   - –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤")
	fmt.Println("   - –°–∫–∏–¥–∫–∏ –≤ –Ω–µ–ø–∏–∫–æ–≤—ã–µ —á–∞—Å—ã (16:30-00:30 GMT)")
}

// extractContentWithDeepSeek –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é DeepSeek API
func extractContentWithDeepSeek(ctx context.Context, apiKey, url string) (string, *DeepSeekUsage, error) {
	prompt := fmt.Sprintf(`–ò–∑–≤–ª–µ–∫–∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ: %s

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
1. –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–π–¥–∏ –æ—Å–Ω–æ–≤–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å
2. –ò–∑–≤–ª–µ–∫–∏ –¢–û–õ–¨–ö–û –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (–±–µ–∑ —Ä–µ–∫–ª–∞–º—ã, –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤)
3. –£–¥–∞–ª–∏ –≤—Å–µ HTML-—Ç–µ–≥–∏ –∏ –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
4. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞ (–∞–±–∑–∞—Ü—ã, –∑–∞–≥–æ–ª–æ–≤–∫–∏)
5. –û–≥—Ä–∞–Ω–∏—á—å —Ç–µ–∫—Å—Ç –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤
6. –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–µ—Ä–Ω–∏ "–ù–æ–≤–æ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.`, url)

	request := DeepSeekRequest{
		Model: "deepseek-chat",
		Messages: []DeepSeekMessage{
			{
				Role:    "user",
				Content: prompt,
			},
		},
		MaxTokens:   2000,
		Temperature: 0.1,
		Stream:      false,
	}

	jsonData, err := json.Marshal(request)
	if err != nil {
		return "", nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", "https://api.deepseek.com/v1/chat/completions", bytes.NewBuffer(jsonData))
	if err != nil {
		return "", nil, fmt.Errorf("failed to create request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+apiKey)

	client := &http.Client{Timeout: 60 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return "", nil, fmt.Errorf("failed to send request: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return "", nil, fmt.Errorf("API request failed with status: %d, response: %s", resp.StatusCode, string(body))
	}

	var response DeepSeekResponse
	if err := json.NewDecoder(resp.Body).Decode(&response); err != nil {
		return "", nil, fmt.Errorf("failed to decode response: %w", err)
	}

	if response.Error != nil {
		return "", nil, fmt.Errorf("API error: %s (type: %s, code: %s)", response.Error.Message, response.Error.Type, response.Error.Code)
	}

	if len(response.Choices) == 0 {
		return "", nil, fmt.Errorf("no choices in response")
	}

	return response.Choices[0].Message.Content, response.Usage, nil
}

// truncateString –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
func truncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen] + "..."
}
