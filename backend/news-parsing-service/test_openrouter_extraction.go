package main

import (
	"context"
	"fmt"
	"os"
	"strings"
	"time"

	"news-parsing-service/internal/services"

	"github.com/sirupsen/logrus"
)

func main() {
	// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	apiKey := os.Getenv("OPENROUTER_API_KEY")
	if apiKey == "" {
		fmt.Println("–û—à–∏–±–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENROUTER_API_KEY")
		fmt.Println("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export OPENROUTER_API_KEY=your_api_key")
		fmt.Println("–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –Ω–∞: https://openrouter.ai/keys")
		return
	}

	// –¢–µ—Å—Ç–æ–≤—ã–µ URL –Ω–æ–≤–æ—Å—Ç–µ–π
	testURLs := []string{
		"https://ria.ru/20250911/buryatiya-2041228792.html",
		"https://lenta.ru/news/2025/09/11/vyyavlen-neozhidannyy-priznak-priblizheniya-dementsii/",
	}

	fmt.Println("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter API")
	fmt.Println("üìä –ú–æ–¥–µ–ª—å: openai/gpt-oss-20b")
	fmt.Println("üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: $0.04/1M –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤, $0.15/1M –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")
	fmt.Println(strings.Repeat("=", 60))

	// –°–æ–∑–¥–∞–µ–º logger
	logger := logrus.New()
	logger.SetLevel(logrus.InfoLevel)

	// –°–æ–∑–¥–∞–µ–º OpenRouter –∏–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	extractor := services.NewOpenRouterContentExtractor(apiKey, logger)

	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
	fmt.Printf("‚ÑπÔ∏è  %s\n", extractor.GetModelInfo())

	for i, url := range testURLs {
		fmt.Printf("\nüì∞ –¢–µ—Å—Ç %d: %s\n", i+1, url)
		fmt.Println(strings.Repeat("-", 50))

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
		if !extractor.IsValidURL(url) {
			fmt.Printf("‚ùå URL –Ω–µ –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n")
			continue
		}

		// –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ OpenRouter API
		ctx, cancel := context.WithTimeout(context.Background(), 60*time.Second)
		defer cancel()

		title, content, err := extractor.ExtractSingleContent(ctx, url)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
			continue
		}

		if content == "" {
			fmt.Printf("‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω (–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)\n")
			continue
		}

		fmt.Printf("‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫: %s\n", title)
		fmt.Printf("üìÑ –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %d —Å–∏–º–≤–æ–ª–æ–≤\n", len(content))
		fmt.Printf("üìù –ù–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %s...\n", truncateString(content, 200))
	}

	fmt.Println("\n" + strings.Repeat("=", 60))
	fmt.Println("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
	fmt.Println("\nüí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: OpenRouter API —Å –º–æ–¥–µ–ª—å—é gpt-oss-20b")
	fmt.Println("   - –û—á–µ–Ω—å —ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –º–æ–¥–µ–ª—å (–≤ 3-4 —Ä–∞–∑–∞ –¥–µ—à–µ–≤–ª–µ GPT-4o-mini)")
	fmt.Println("   - –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
	fmt.Println("   - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ batch-–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏")
}

// truncateString –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
func truncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen] + "..."
}
