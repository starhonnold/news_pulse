#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastText –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
"""

import sys
import time
from classifier import FastTextNewsClassifier


def test_classifier():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö"""
    
    print("=" * 80)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï FASTTEXT –ö–õ–ê–°–°–ò–§–ò–ö–ê–¢–û–†–ê")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
    print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞...")
    classifier = FastTextNewsClassifier()
    classifier.load_model()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏
    model_info = classifier.get_model_info()
    print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:")
    print(f"  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {model_info['repo_id']}")
    print(f"  –§–∞–π–ª: {model_info['filename']}")
    print(f"  –ó–∞–≥—Ä—É–∂–µ–Ω–∞: {model_info['is_loaded']}")
    print(f"  FastText –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {model_info['categories']}")
    print(f"  –ü—Ä–æ–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {model_info['target_categories']}")
    
    print("\n" + "=" * 80)
    print("üìù –¢–ï–°–¢–û–í–´–ï –ü–†–ò–ú–ï–†–´")
    print("=" * 80)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    test_cases = [
        {
            'title': '–§—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á –†–æ—Å—Å–∏—è - –ë—Ä–∞–∑–∏–ª–∏—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–æ —Å—á–µ—Ç–æ–º 2:1',
            'description': '–°–±–æ—Ä–Ω–∞—è –†–æ—Å—Å–∏–∏ –æ–¥–µ—Ä–∂–∞–ª–∞ –ø–æ–±–µ–¥—É –Ω–∞–¥ –∫–æ–º–∞–Ω–¥–æ–π –ë—Ä–∞–∑–∏–ª–∏–∏ –≤ —Ç–æ–≤–∞—Ä–∏—â–µ—Å–∫–æ–º –º–∞—Ç—á–µ',
            'expected_id': 1,
            'expected_name': '–°–ø–æ—Ä—Ç'
        },
        {
            'title': 'Apple –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–æ–≤—ã–π iPhone 15 Pro —Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º A17',
            'description': '–ö–æ–º–ø–∞–Ω–∏—è Apple –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª–∞ –Ω–æ–≤—ã–µ —Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∫–∞–º–µ—Ä–∞–º–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é',
            'expected_id': 2,
            'expected_name': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
        },
        {
            'title': '–£—á–µ–Ω—ã–µ –æ—Ç–∫—Ä—ã–ª–∏ –Ω–æ–≤—ã–π –≤–∏–¥ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤ –≤ –°–∏–±–∏—Ä–∏',
            'description': '–ü–∞–ª–µ–æ–Ω—Ç–æ–ª–æ–≥–∏ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—Å—Ç–∞–Ω–∫–∏ —Ä–∞–Ω–µ–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –≤–∏–¥–∞ –¥–∏–Ω–æ–∑–∞–≤—Ä–æ–≤',
            'expected_id': 2,
            'expected_name': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'
        },
        {
            'title': '–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∞–ª –∑–∞–∫–æ–Ω –æ –±—é–¥–∂–µ—Ç–µ –Ω–∞ 2024 –≥–æ–¥',
            'description': '–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –ø—Ä–µ–¥—É—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É',
            'expected_id': 3,
            'expected_name': '–ü–æ–ª–∏—Ç–∏–∫–∞'
        },
        {
            'title': '–ù–∞ –≥—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ–∏–∑–æ—à–µ–ª –≤–æ–æ—Ä—É–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç',
            'description': '–°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –º–µ–∂–¥—É –≤–æ–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è —É–∂–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π',
            'expected_id': 3,
            'expected_name': '–ü–æ–ª–∏—Ç–∏–∫–∞'
        },
        {
            'title': '–¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫ –ø–æ–≤—ã—Å–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É –¥–æ 16%',
            'description': '–¶–ë –†–§ –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –¥–ª—è –±–æ—Ä—å–±—ã —Å –∏–Ω—Ñ–ª—è—Ü–∏–µ–π',
            'expected_id': 4,
            'expected_name': '–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ —Ñ–∏–Ω–∞–Ω—Å—ã'
        },
        {
            'title': '–í –ú–æ—Å–∫–≤–µ –æ—Ç–∫—Ä—ã–ª—Å—è –Ω–æ–≤—ã–π –¥–µ—Ç—Å–∫–∏–π —Å–∞–¥ –Ω–∞ 300 –º–µ—Å—Ç',
            'description': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –¥–æ—à–∫–æ–ª—å–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –æ—Å–Ω–∞—â–µ–Ω–æ –∏–≥—Ä–æ–≤—ã–º–∏ –ø–ª–æ—â–∞–¥–∫–∞–º–∏ –∏ –±–∞—Å—Å–µ–π–Ω–æ–º',
            'expected_id': 5,
            'expected_name': '–û–±—â–µ—Å—Ç–≤–æ'
        },
        {
            'title': '–í –≠—Ä–º–∏—Ç–∞–∂–µ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –≤—ã—Å—Ç–∞–≤–∫–∞ –∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏—Å—Ç–æ–≤',
            'description': '–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —É–≤–∏–¥–µ—Ç—å —Ä–∞–±–æ—Ç—ã –ú–æ–Ω–µ, –†–µ–Ω—É–∞—Ä–∞ –∏ –¥—Ä—É–≥–∏—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤',
            'expected_id': 5,
            'expected_name': '–û–±—â–µ—Å—Ç–≤–æ'
        },
        {
            'title': '–í—Ä–∞—á–∏ –Ω–∞–∑–≤–∞–ª–∏ –ª—É—á—à–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞',
            'description': '–≠–∫—Å–ø–µ—Ä—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç –≤–∫–ª—é—á–∏—Ç—å –≤ —Ä–∞—Ü–∏–æ–Ω —Ü–∏—Ç—Ä—É—Å–æ–≤—ã–µ, –∏–º–±–∏—Ä—å –∏ –º–µ–¥',
            'expected_id': 5,
            'expected_name': '–û–±—â–µ—Å—Ç–≤–æ'
        },
        {
            'title': '–¢–æ–ø-10 –ª—É—á—à–∏—Ö –∫—É—Ä–æ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –ª–µ—Ç–æ–º',
            'description': '–≠–∫—Å–ø–µ—Ä—Ç—ã —Å–æ—Å—Ç–∞–≤–∏–ª–∏ —Ä–µ–π—Ç–∏–Ω–≥ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤',
            'expected_id': 5,
            'expected_name': '–û–±—â–µ—Å—Ç–≤–æ'
        },
    ]
    
    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
    correct = 0
    total = len(test_cases)
    
    for i, test_case in enumerate(test_cases, 1):
        text = f"{test_case['title']}. {test_case['description']}"
        result = classifier.classify_text(text)
        
        is_correct = result['category_id'] == test_case['expected_id']
        if is_correct:
            correct += 1
            status = "‚úÖ"
        else:
            status = "‚ùå"
        
        print(f"\n{status} –ü—Ä–∏–º–µ—Ä {i}:")
        print(f"  –ó–∞–≥–æ–ª–æ–≤–æ–∫: {test_case['title'][:60]}...")
        print(f"  –û–∂–∏–¥–∞–µ–º–∞—è: {test_case['expected_name']} (ID: {test_case['expected_id']})")
        print(f"  FastText: {result['original_category']} (score: {result['original_score']:.4f})")
        print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['category_name']} (ID: {result['category_id']})")
        print(f"  –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.4f}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    accuracy = (correct / total) * 100
    print("\n" + "=" * 80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π: {correct}/{total}")
    print(f"–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
    print("=" * 80)
    
    # –¢–µ—Å—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    print("\n" + "=" * 80)
    print("üì¶ –¢–ï–°–¢ –ü–ê–ö–ï–¢–ù–û–ô –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 80)
    
    batch_items = [
        {'index': 0, 'title': '–§—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á', 'description': '–ó–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–æ —Å—á–µ—Ç–æ–º 2:1'},
        {'index': 1, 'title': 'iPhone 15 Pro', 'description': 'Apple –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–æ–≤—ã–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω'},
        {'index': 2, 'title': '–¶–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫ –ø–æ–≤—ã—Å–∏–ª —Å—Ç–∞–≤–∫—É', 'description': '–¶–ë –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ'},
    ]
    
    batch_results = classifier.classify_batch(batch_items)
    
    for result in batch_results:
        print(f"\n–ò–Ω–¥–µ–∫—Å {result['index']}:")
        print(f"  –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category_name']} (ID: {result['category_id']})")
        print(f"  FastText: {result['original_category']} (score: {result['original_score']:.4f})")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\n" + "=" * 80)
    print("‚ö° –¢–ï–°–¢ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("=" * 80)
    
    test_text = "–§—É—Ç–±–æ–ª—å–Ω—ã–π –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å–æ —Å—á–µ—Ç–æ–º 3:2 –≤ –ø–æ–ª—å–∑—É –¥–æ–º–∞—à–Ω–µ–π –∫–æ–º–∞–Ω–¥—ã"
    iterations = 1000
    
    print(f"–ò—Ç–µ—Ä–∞—Ü–∏–π: {iterations}")
    print("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")
    
    start_time = time.time()
    for _ in range(iterations):
        classifier.classify_text(test_text)
    elapsed = time.time() - start_time
    
    avg_time = (elapsed / iterations) * 1000
    throughput = iterations / elapsed
    
    print(f"\n–û–±—â–µ–µ –≤—Ä–µ–º—è: {elapsed:.3f}—Å")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}–º—Å")
    print(f"–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {throughput:.1f} –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π/—Å–µ–∫")
    print("=" * 80)
    
    return classifier, accuracy


if __name__ == "__main__":
    try:
        classifier, accuracy = test_classifier()
        print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

