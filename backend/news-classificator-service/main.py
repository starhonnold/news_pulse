"""
FastAPI —Å–µ—Ä–≤–∏—Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
"""

import logging
import time
from typing import List, Dict, Any
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field
import yaml

from classifier import FastTextNewsClassifier


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä
classifier = None


# Pydantic –º–æ–¥–µ–ª–∏
class ClassifyRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    text: str = Field(..., description="–¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")


class BatchItem(BaseModel):
    """–≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    index: int = Field(..., description="–ò–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞")
    title: str = Field(default="", description="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏")
    description: str = Field(default="", description="–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")


class BatchClassifyRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–∞–∫–µ—Ç–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    items: List[BatchItem] = Field(..., description="–°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")


class ClassifyResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    original_category: str = Field(..., description="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è FastText")
    original_score: float = Field(..., description="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä FastText")
    category_id: int = Field(..., description="ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    category_name: str = Field(..., description="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
    confidence: float = Field(..., description="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (0-1)")


class BatchClassifyResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –ø–∞–∫–µ—Ç–Ω–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    results: List[Dict[str, Any]] = Field(..., description="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏")


class HealthResponse(BaseModel):
    """–û—Ç–≤–µ—Ç health check"""
    status: str
    model_loaded: bool
    model_info: Dict[str, Any]
    uptime: float


# Lifespan –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
@asynccontextmanager
async def lifespan(app: FastAPI):
    """Lifespan —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global classifier
    
    # Startup
    logger.info("üöÄ Starting News Classificator Service...")
    
    try:
        classifier = FastTextNewsClassifier()
        classifier.load_model()
        logger.info("‚úÖ Classifier initialized successfully")
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize classifier: {e}")
        raise
    
    yield
    
    # Shutdown
    logger.info("üëã Shutting down News Classificator Service...")


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="News Classificator Service",
    description="FastText-based —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π",
    version="1.0.0",
    lifespan=lifespan
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –¥–ª—è uptime
START_TIME = time.time()


@app.get("/", tags=["Root"])
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "service": "News Classificator Service",
        "version": "1.0.0",
        "model": "data-silence/fasttext-rus-news-classifier",
        "status": "running"
    }


@app.get("/health", response_model=HealthResponse, tags=["Health"])
async def health_check():
    """Health check endpoint"""
    if classifier is None:
        raise HTTPException(status_code=503, detail="Classifier not initialized")
    
    uptime = time.time() - START_TIME
    
    return HealthResponse(
        status="healthy" if classifier.is_loaded() else "unhealthy",
        model_loaded=classifier.is_loaded(),
        model_info=classifier.get_model_info(),
        uptime=uptime
    )


@app.post("/classify", response_model=ClassifyResponse, tags=["Classification"])
async def classify_text(request: ClassifyRequest):
    """
    –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    
    Args:
        request: –ó–∞–ø—Ä–æ—Å —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    if classifier is None or not classifier.is_loaded():
        raise HTTPException(status_code=503, detail="Classifier not loaded")
    
    try:
        result = classifier.classify_text(request.text)
        return ClassifyResponse(**result)
    except Exception as e:
        logger.error(f"Classification error: {e}")
        raise HTTPException(status_code=500, detail=f"Classification failed: {str(e)}")


@app.post("/classify/batch", response_model=BatchClassifyResponse, tags=["Classification"])
async def classify_batch(request: BatchClassifyRequest):
    """
    –ü–∞–∫–µ—Ç–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
    
    Args:
        request: –ó–∞–ø—Ä–æ—Å —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
    """
    if classifier is None or not classifier.is_loaded():
        raise HTTPException(status_code=503, detail="Classifier not loaded")
    
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Pydantic –º–æ–¥–µ–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏
        items = [item.model_dump() for item in request.items]
        
        results = classifier.classify_batch(items)
        
        return BatchClassifyResponse(results=results)
    except Exception as e:
        logger.error(f"Batch classification error: {e}")
        raise HTTPException(status_code=500, detail=f"Batch classification failed: {str(e)}")


@app.get("/categories", tags=["Info"])
async def get_categories():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    if classifier is None:
        raise HTTPException(status_code=503, detail="Classifier not initialized")
    
    return {
        "fasttext_categories": list(classifier.category_mapping.keys()),
        "project_categories": classifier.category_names,
        "mapping": classifier.category_mapping
    }


if __name__ == "__main__":
    import uvicorn
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open("config.yaml", "r", encoding="utf-8") as f:
        config = yaml.safe_load(f)
    
    host = config['server']['host']
    port = config['server']['port']
    workers = config['server']['workers']
    
    logger.info(f"Starting server on {host}:{port}")
    
    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        workers=workers,
        log_level="info"
    )

