#!/bin/bash

# News Pulse - –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
# –ê–≤—Ç–æ—Ä: News Pulse Team
# –í–µ—Ä—Å–∏—è: 1.0

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
print_message() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
check_requirements() {
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ RAM
    TOTAL_RAM=$(free -m | awk 'NR==2{printf "%.0f", $2/1024}')
    if [ "$TOTAL_RAM" -lt 8 ]; then
        print_warning "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RAM: ${TOTAL_RAM}GB. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 8GB"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    else
        print_success "RAM: ${TOTAL_RAM}GB - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ
    FREE_SPACE=$(df -BG . | awk 'NR==2{print $4}' | sed 's/G//')
    if [ "$FREE_SPACE" -lt 20 ]; then
        print_warning "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞: ${FREE_SPACE}GB. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 20GB"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    else
        print_success "–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ: ${FREE_SPACE}GB - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
create_env_file() {
    if [ ! -f .env ]; then
        print_message "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞..."
        if [ -f backend/env.example ]; then
            cp backend/env.example .env
            print_success ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏–∑ —à–∞–±–ª–æ–Ω–∞"
            print_warning "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª–µ!"
        else
            print_error "–§–∞–π–ª backend/env.example –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
        fi
    else
        print_message ".env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_old_containers() {
    print_message "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    if [ -f backend/docker-compose.yml ]; then
        cd backend
        docker-compose down 2>/dev/null || true
        cd ..
        print_success "–°—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    else
        print_error "–§–∞–π–ª backend/docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
build_and_start() {
    print_message "–°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    cd backend
    
    # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
    print_message "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
    docker-compose build --no-cache
    
    # –ó–∞–ø—É—Å–∫ PostgreSQL
    print_message "–ó–∞–ø—É—Å–∫ PostgreSQL..."
    docker-compose up -d postgres
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
    for i in {1..30}; do
        if docker-compose exec -T postgres pg_isready -U news_pulse_user -d news_pulse >/dev/null 2>&1; then
            print_success "PostgreSQL –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
            break
        fi
        if [ $i -eq 30 ]; then
            print_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL"
            exit 1
        fi
        sleep 2
    done
    
    # –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    print_message "–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose up -d news-parsing-service news-management-service pulse-service notification-service api-gateway
    
    # –ó–∞–ø—É—Å–∫ frontend (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if [ -f ../frontend/package.json ]; then
        print_message "–ó–∞–ø—É—Å–∫ frontend..."
        docker-compose up -d frontend 2>/dev/null || print_warning "Frontend –Ω–µ –∑–∞–ø—É—â–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)"
    fi
    
    cd ..
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
check_services() {
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    cd backend
    
    # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    SERVICES=("postgres" "api-gateway" "news-parsing-service" "news-management-service" "pulse-service" "notification-service")
    
    sleep 30  # –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–∏—Å–∞–º –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    
    for service in "${SERVICES[@]}"; do
        if docker-compose ps $service | grep -q "Up"; then
            print_success "$service - —Ä–∞–±–æ—Ç–∞–µ—Ç"
        else
            print_error "$service - –æ—à–∏–±–∫–∞"
            print_message "–õ–æ–≥–∏ $service:"
            docker-compose logs --tail=20 $service
        fi
    done
    
    cd ..
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ollama
init_ollama() {
    print_message "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ollama AI —Å–µ—Ä–≤–∏—Å–∞..."
    
    cd backend
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama
    if docker-compose ps ollama | grep -q "Up"; then
        print_message "–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π..."
        docker exec news_pulse_ollama ollama pull llama3.2:3b || print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å Ollama"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏
        if curl -f http://localhost:11434/api/tags >/dev/null 2>&1; then
            print_success "Ollama –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
        else
            print_warning "Ollama –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        fi
    else
        print_warning "Ollama –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
    
    cd ..
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ API
check_api() {
    print_message "–ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API Gateway
    if curl -f http://localhost:8080/health >/dev/null 2>&1; then
        print_success "API Gateway –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_error "API Gateway –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    if curl -f http://localhost:8080/api/parsing/status >/dev/null 2>&1; then
        print_success "News Parsing Service –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        print_warning "News Parsing Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
}

# –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
start_parsing() {
    print_message "–ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π..."
    
    if curl -X POST http://localhost:8080/api/parsing/parse-all >/dev/null 2>&1; then
        print_success "–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω"
    else
        print_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π"
    fi
}

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
show_deployment_info() {
    print_success "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo
    echo "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
    echo "  - Frontend: http://localhost:3000"
    echo "  - API Gateway: http://localhost:8080"
    echo "  - API Health: http://localhost:8080/health"
    echo "  - News Parsing: http://localhost:8085"
    echo "  - News Management: http://localhost:8082"
    echo "  - Pulse Service: http://localhost:8083"
    echo "  - Notification Service: http://localhost:8084"
    echo "  - Ollama AI: http://localhost:11434"
    echo
    echo "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞–º–∏:"
    echo "  - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: docker-compose logs -f"
    echo "  - –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose down"
    echo "  - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart"
    echo
    echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:"
    echo "  - README.md - –æ—Å–Ω–æ–≤–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    echo "  - documentation/ - –ø–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    echo
    print_warning "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ .env —Ñ–∞–π–ª–µ!"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ News Pulse - –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"
    echo "======================================"
    echo
    
    check_requirements
    create_env_file
    stop_old_containers
    build_and_start
    check_services
    init_ollama
    check_api
    start_parsing
    show_deployment_info
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
case "${1:-}" in
    --help|-h)
        echo "News Pulse - –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"
        echo
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
        echo
        echo "–û–ø—Ü–∏–∏:"
        echo "  --help, -h     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        echo "  --no-parsing   –ù–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π"
        echo "  --no-ollama    –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Ollama"
        echo
        exit 0
        ;;
    --no-parsing)
        SKIP_PARSING=true
        ;;
    --no-ollama)
        SKIP_OLLAMA=true
        ;;
esac

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main
